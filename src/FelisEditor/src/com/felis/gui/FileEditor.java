package com.felis.gui;

import com.felis.lib.CNFGrammar;
import com.felis.lib.CYKParseTree;
import com.felis.lib.InputProcessor;
import com.felis.lib.PairStringInt;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class FileEditor extends javax.swing.JFrame {

	private boolean fileChanges;
	private CNFGrammar grammar;
	private ParseTreeViewer treeViewer;

	int catIndex = 0;
	ArrayList<ImageIcon> cats = new ArrayList<>();

	public FileEditor(CNFGrammar g, ParseTreeViewer tv) {
		initComponents();

		catIndex = 0;
		cats = new ArrayList<>();
		final int IMGCOUNT = 2;	// dikurangi buat dikirim!
		for (int i = 1; i <= IMGCOUNT; i++) {
			cats.add(new javax.swing.ImageIcon(getClass().getResource("img" + i + ".jpg")));
		}
		imgCat.setIcon(cats.get(catIndex));

		grammar = g;
		treeViewer = tv;
		fileChanges = false;

		txtCode.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				fileChanges = true;
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				fileChanges = true;
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				fileChanges = true;
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT
	 * modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtCode = new javax.swing.JTextArea();
        panelCat = new javax.swing.JPanel();
        imgCat = new javax.swing.JLabel();
        menuFileEditor = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuCheck = new javax.swing.JMenuItem();
        menuGetParseTree = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Felis Editor");
        setLocationByPlatform(true);
        setResizable(false);

        txtCode.setColumns(20);
        txtCode.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtCode.setRows(5);
        txtCode.setText("begin\n\tinput ( hello )\n\toutput ( world )\nend");
        jScrollPane1.setViewportView(txtCode);

        panelCat.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cats", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        imgCat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgCat.setToolTipText("");
        imgCat.setMaximumSize(new java.awt.Dimension(500, 500));
        imgCat.setMinimumSize(new java.awt.Dimension(500, 500));
        imgCat.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout panelCatLayout = new javax.swing.GroupLayout(panelCat);
        panelCat.setLayout(panelCatLayout);
        panelCatLayout.setHorizontalGroup(
            panelCatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCatLayout.setVerticalGroup(
            panelCatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imgCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuFile.setText("File");

        menuNew.setText("New");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        menuFile.add(menuNew);

        menuOpen.setText("Open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuOpen);
        menuFile.add(jSeparator1);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        menuFileEditor.add(menuFile);

        menuEdit.setText("Edit");

        menuCheck.setText("Check");
        menuCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCheckActionPerformed(evt);
            }
        });
        menuEdit.add(menuCheck);

        menuGetParseTree.setText("Get Parse Tree");
        menuGetParseTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGetParseTreeActionPerformed(evt);
            }
        });
        menuEdit.add(menuGetParseTree);

        menuFileEditor.add(menuEdit);

        setJMenuBar(menuFileEditor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
		this.dispose();
	}//GEN-LAST:event_menuExitActionPerformed

	private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
		int confirm = JOptionPane.YES_OPTION;
		if (fileChanges) {
			confirm = JOptionPane.showConfirmDialog(
				rootPane,
				"The current content will be deleted. Are you sure?",
				"",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		}
		if (confirm == JOptionPane.YES_OPTION) {
			txtCode.setText(null);
		}
	}//GEN-LAST:event_menuNewActionPerformed

	private void menuCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCheckActionPerformed
		long startTime = System.currentTimeMillis();
		ArrayList<PairStringInt> splitted = InputProcessor.splitInputText(txtCode.getText());
		boolean result = grammar.check(splitted);
		long endTime = System.currentTimeMillis();
		String message = "";
		message += result ?
			"The program is successfully checked.\n" :
			"There is an error inside the program.\n";
		message += result ? "" : ("Possible error line : " + CNFGrammar.getErrorLineAtLastRun() + "\n");
		message += "Checked in : " + ((float) (endTime - startTime) / 1000) + " seconds.";
		JOptionPane.showMessageDialog(rootPane,
			message,
			"",
			JOptionPane.INFORMATION_MESSAGE);
		
		catIndex = (catIndex + 1) % cats.size();
		imgCat.setIcon(cats.get(catIndex));

	}//GEN-LAST:event_menuCheckActionPerformed

	private void menuGetParseTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGetParseTreeActionPerformed
		long startTime = System.currentTimeMillis();
		ArrayList<PairStringInt> splitted = InputProcessor.splitInputText(txtCode.getText());
		CYKParseTree resultTree = grammar.getParseTree(splitted);
		long endTime = System.currentTimeMillis();
		String message = "";
		message += (resultTree != null) ?
			"The program is successfully checked. Check the parse tree at Parse Tree Viewer.\n" :
			"There is an error inside the program.\n";
		message += (resultTree != null) ? "" : ("Possible error line : " + CNFGrammar.getErrorLineAtLastRun() + "\n");
		message += "Checked in : " + ((float) (endTime - startTime) / 1000) + " seconds.";
		JOptionPane.showMessageDialog(rootPane,
			message,
			"",
			JOptionPane.INFORMATION_MESSAGE);
		treeViewer.setParseTree(resultTree);

		catIndex = (catIndex + 1) % cats.size();
		imgCat.setIcon(cats.get(catIndex));

	}//GEN-LAST:event_menuGetParseTreeActionPerformed

	private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
		int confirm = JOptionPane.showConfirmDialog(
			rootPane,
			"Current content will be overwritten. Are you sure?",
			"",
			JOptionPane.OK_CANCEL_OPTION,
			JOptionPane.INFORMATION_MESSAGE);
		if (confirm == JOptionPane.OK_OPTION) {
			String filename = JOptionPane.showInputDialog(
				rootPane,
				"Please input path to the file:",
				"",
				JOptionPane.PLAIN_MESSAGE);
			try {
				FileInputStream ifstream = new FileInputStream(filename);
				Scanner sc = new Scanner(ifstream);
				String codes = "";
				while (sc.hasNextLine()) {
					codes += sc.nextLine() + "\n";
				}
				txtCode.setText(codes);
			} catch (FileNotFoundException ex) {
				JOptionPane.showMessageDialog(
					rootPane,
					"Cannot find the file " + filename + ".\nMake sure you have typed a correct path, then try again.",
					"",
					JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_menuOpenActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgCat;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menuCheck;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuBar menuFileEditor;
    private javax.swing.JMenuItem menuGetParseTree;
    private javax.swing.JMenuItem menuNew;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JPanel panelCat;
    private javax.swing.JTextArea txtCode;
    // End of variables declaration//GEN-END:variables
}
