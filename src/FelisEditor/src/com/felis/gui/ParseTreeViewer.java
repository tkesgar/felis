package com.felis.gui;

import com.felis.lib.CYKParseTree;
import java.util.Observable;
import java.util.Observer;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

public class ParseTreeViewer extends javax.swing.JFrame {

	private class ObservableParseTree extends Observable {
		private CYKParseTree parseTree = null;
		public CYKParseTree getParseTree() {
			return parseTree;
		}
		private void setParseTree(CYKParseTree tree) {
			parseTree = tree;
			setChanged();
			notifyObservers();
		}
	}

	private ObservableParseTree observableTree = new ObservableParseTree();
	
	public CYKParseTree getParseTree() {
		return observableTree.getParseTree();
	}

	public void setParseTree(CYKParseTree tree) {
		observableTree.setParseTree(tree);
	}

	public ParseTreeViewer() {
		initComponents();
		observableTree.setParseTree(null);

		observableTree.addObserver(new Observer() {
			@Override
			public void update(Observable o, Object arg) {
				if (o instanceof ObservableParseTree) {
					final CYKParseTree parseTree = ((ObservableParseTree) o).getParseTree();
					TreeModel treeModel = new TreeModel() {

						@Override
						public Object getRoot() {
							return parseTree;
						}

						@Override
						public Object getChild(Object parent, int index) {
							CYKParseTree parentTree = (CYKParseTree) parent;
							if (index == 0) {
								return parentTree.getLeft();
							} else {
								return parentTree.getRight();
							}
						}

						@Override
						public int getChildCount(Object parent) {
							return 2;
						}

						@Override
						public boolean isLeaf(Object node) {
							CYKParseTree nodeTree = (CYKParseTree) node;
							return (nodeTree.getLeft() == null) && (nodeTree.getRight() == null);
						}

						@Override
						public void valueForPathChanged(TreePath path, Object newValue) {
							// do nothing
						}

						@Override
						public int getIndexOfChild(Object parent, Object child) {
							CYKParseTree parentTree = (CYKParseTree) parent;
							CYKParseTree childTree = (CYKParseTree) child;
							return (parentTree.getLeft() == childTree) ? 0 : 1;
						}

						@Override
						public void addTreeModelListener(TreeModelListener l) {
							// do nothing
						}

						@Override
						public void removeTreeModelListener(TreeModelListener l) {
							// do nothing
						}
					};
					treeParse.setModel(treeModel);
				}
			}
		});

	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT
	 * modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblInfoParse = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeParse = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Parse Tree Viewer");
        setLocationByPlatform(true);
        setType(java.awt.Window.Type.POPUP);

        lblInfoParse.setText("Run \"Get Parse Tree\" to obtain the parse tree.");

        treeParse.setModel(null);
        jScrollPane1.setViewportView(treeParse);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblInfoParse)
                        .addGap(0, 156, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfoParse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInfoParse;
    private javax.swing.JTree treeParse;
    // End of variables declaration//GEN-END:variables
}
